name: release
on:
  push:
    tags:
      - v*

env:
  BIN_NAME: t
  PROJECT_NAME: tskmstr
  REPO_NAME: rbuckland/tskmstr
  
jobs:
  release:
    name: release ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
       # build: [x86_64-linux, aarch64-linux, aarch64-macos, x86_64-macos, x86_64-windows, aarch64-windows, x86_64-freebsd]
        build: [x86_64-linux]
        include:
        - build: x86_64-linux
          os: ubuntu-22.04
          rust: nightly
          target: x86_64-unknown-linux-gnu
        # - build: aarch64-linux
        #   os: ubuntu-22.04
        #   rust: nightly
        #   target: aarch64-unknown-linux-gnu
        #   cross: true
        # - build: x86_64-macos
        #   os: macos-latest
        #   rust: nightly
        #   target: x86_64-apple-darwin
        #   cross: false
        # - build: x86_64-windows
        #   os: windows-2019
        #   rust: nightly
        #   target: x86_64-pc-windows-msvc
        #   cross: false
        # - build: aarch64-windows
        #   os: windows-2019
        #   rust: nightly
        #   target: aarch64-pc-windows-msvc
        #   cross: true
        # - build: aarch64-macos
        #   os: macos-latest
        #   rust: nightly
        #   cross: true
        #   target: aarch64-apple-darwin
        # - build: x86_64-freebsd
        #   os: ubuntu-22.04
        #   rust: nightly
        #   cross: true
        #   target: x86_64-unknown-freebsd
    steps:
      - name: Checkout Source
        uses: actions/checkout@master
      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: test
          args: --release --locked --target ${{ matrix.target }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-macos'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Strip release binary (arm)
        if: matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            /target/${{ matrix.target }}/release/$BIN_NAME

      - name: Copy file to dist
        shell: bash
        run: |
          mkdir -p dist 2> /dev/null
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi
          ls -al dist/

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: $TAG
          overwrite: true 

      # - name: Upload Release Asset
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} 
      #     # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./my-artifact.zip
      #     asset_name: my-artifact.zip
      #     asset_content_type: application/zip          